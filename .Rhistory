remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
best_times_sf <- best_times %>%
select(stop_id, minutes_until_time_limit, transfer_level) %>%
mutate(stop_id = as.character(stop_id)) %>%
left_join(stops_sf, by = 'stop_id') %>%
st_set_geometry('geometry')
best_times_sf <- best_times %>%
select(stop_id, minutes_until_time_limit) %>%
mutate(stop_id = as.character(stop_id)) %>%
left_join(stops_sf, by = 'stop_id') %>%
st_set_geometry('geometry')
leaflet() %>% addTiles() %>% addCircleMarkers(data = best_times_sf)
# Level 0: Starting points
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt)
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
keep_cols <- c("stop_id", "minutes_until_time_limit")
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt)
merged <- merge(p3_dt, p2_dt, all = T)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
best_times_sf <- best_times %>%
select(stop_id, minutes_until_time_limit) %>%
mutate(stop_id = as.character(stop_id)) %>%
left_join(stops_sf, by = 'stop_id') %>%
st_set_geometry('geometry')
leaflet() %>% addTiles() %>% addCircleMarkers(data = best_times_sf)
profvis({
# Level 0: Starting points
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt)
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
keep_cols <- c("stop_id", "minutes_until_time_limit")
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt, all = T)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
})
profvis({
# Level 0: Starting points
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt)
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
keep_cols <- c("stop_id", "minutes_until_time_limit")
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
merged <- merge(p3_dt, p2_dt, all = T)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
})
merged <- merge(p3_dt, p2_dt, all = T, sort = F)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
View(merged)
profvis({
# Level 0: Starting points
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt)
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
keep_cols <- c("stop_id", "minutes_until_time_limit")
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt, all = T, sort = F)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
})
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt)
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
keep_cols <- c("stop_id", "minutes_until_time_limit", 'transfer_level')
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt, all = T, sort = F)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
best_times_sf <- best_times %>%
select(stop_id, minutes_until_time_limit, transfer_level) %>%
mutate(stop_id = as.character(stop_id)) %>%
left_join(stops_sf, by = 'stop_id') %>%
st_set_geometry('geometry')
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = best_times_sf)
# Level 0: Starting points
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt[minutes_until_time_limit >= 0])
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
p3_dt[minutes_until_time_limit >= 0]
p1_dt <- as.data.table((place_registry[[(current_stop_id)]][as.character(arrival_time)][[1]]))
p1_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 0L
)]
p1_dt = unique(p1_dt)
# Level 1: All 1-transfer destinations (vectorized!)
p2_dt <- connections_dt[p1_dt,
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p2_dt[, `:=`(
stop_id = as.character(stop_id),
minutes_until_time_limit = minutes_until_time_limit - xfer_penalty_m,
transfer_level = 1L
)]
p2_dt = unique(p2_dt[minutes_until_time_limit >= 0])
# Level 2: All 2-transfer destinations (vectorized!)
p3_dt <- connections_dt[p2_dt[, .(stop_id, minutes_until_time_limit)],
on = c("from_stop" = "stop_id", "available_time" = "minutes_until_time_limit"),
nomatch = 0]
p3_dt[, `:=`(
stop_id = as.character(stop_id),
transfer_level = 2L
)]
p3_dt = p3_dt[minutes_until_time_limit >= 0]
keep_cols <- c("stop_id", "minutes_until_time_limit", 'transfer_level')
remove_cols <- setdiff(names(p3_dt), keep_cols)
p3_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p2_dt), keep_cols)
p2_dt[, (remove_cols) := NULL]
remove_cols <- setdiff(names(p1_dt), keep_cols)
p1_dt[, (remove_cols) := NULL]
p3_dt = unique(p3_dt)
merged <- merge(p3_dt, p2_dt, all = T, sort = F)
best_times = merged[, .SD[which.max(minutes_until_time_limit)], by = stop_id]
best_times_sf <- best_times %>%
select(stop_id, minutes_until_time_limit, transfer_level) %>%
mutate(stop_id = as.character(stop_id)) %>%
left_join(stops_sf, by = 'stop_id') %>%
st_set_geometry('geometry')
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = best_times_sf)
write_sf(best_times_sf, 'sf_output/test_dt_sf.shp')
library(mapgl)
install.packages(mapgl)
install.packages("mapgl")
library(mapgl)
mb_sf_em <- read_sf('sf_outputs/mb_sf_em.shp')
library(sf)
mb_sf_em <- read_sf('sf_outputs/mb_sf_em.shp')
mb_sf_em <- read_sf('sf_output/mb_sf_em.shp')
mapboxgl(bounds = mb_sf_em) |>
add_fill_layer(id = "nc_data",
source = mb_sf_em,
fill_color = "blue",
fill_opacity = 0.5)
maplibre(bounds = mb_sf_em) |>
add_fill_layer(id = "nc_data",
source = mb_sf_em,
fill_color = "blue",
fill_opacity = 0.5)
mb_quartiled <- mb_sf_em %>%
mutate(decile = ntile(max_e,10))
library(tidyverse)
mb_quartiled <- mb_sf_em %>%
mutate(decile = ntile(max_e,10))
?st_union
View(mb_quartiled)
mb_quartiled = mb_quartiled %>%
group_by(decile) %>%
summarise(geometry = st_union('geometry'))
mb_quartiled = mb_quartiled %>%
group_by(decile) %>%
summarise(geometry = st_union(geometry))
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = "blue",
fill_opacity = 0.5)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[2:10],
na_color = "white"
),
fill_opacity = 0.5)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[2:10],
values = seq(25, 70, 15),
na_color = "white"
),
fill_opacity = 0.5)
brewer_pal <- RColorBrewer::brewer.pal(10, "RdYlBu")
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[2:10],
values = seq(25, 70, 15),
na_color = "white"
),
fill_opacity = 0.5)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[2:10],
values = seq(1:9),
na_color = "white"
),
fill_opacity = 0.5)
brewer_pal[2:10]
seq(1:9)
View(mb_quartiled)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[c(2,7)],
values = c(3,4),
na_color = "white"
),
fill_opacity = 0.5)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[c(2,7)],
values = c(3,4),
na_color = "white"
),
fill_opacity = 1)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[c(2,7)],
values = c(3,4)
),
fill_opacity = 1)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[c(2,7)],
values = c(3,4),
na_color = "blue"
),
fill_opacity = 1)
brewer_pal <- RColorBrewer::brewer.pal(10, "RdYlBu")
View(mb_quartiled)
brewer_pal[c(2,7)]
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],
stops = brewer_pal[c(2,7)],
values = c(2,7),
na_color = "blue"
),
fill_opacity = 1)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decline",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 1)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decile",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 1)
write_sf(mb_quartiled, 'sf_output/quartile_mb.shp')
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decile",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 0.5)
mb_quartiled = st_simplify(mb_quartiled, dTolerance = 100)
maplibre(bounds = mb_quartiled) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled,
fill_color = step_expr(
column = "decile",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 0.5)
mb_quartiled <- mb_sf_em %>%
mutate(decile = ntile(max_e,10))
mb_quartiled = mb_quartiled %>%
group_by(decile) %>%
summarise(geometry = st_union(geometry))
mb_quartiled_simple = st_simplify(mb_quartiled, dTolerance = 100, preserveTopology = T)
maplibre(bounds = mb_quartiled_simple) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled_simple,
fill_color = step_expr(
column = "decile",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 0.5)
library(rmapshaper)
install.packages('rmapshaper')
library(rmapshaper)
mb_quartiled_simple = st_simplify(mb_quartiled, dTolerance = 250, preserveTopology = T)
maplibre(bounds = mb_quartiled_simple) |>
add_fill_layer(id = "nc_data",
source = mb_quartiled_simple,
fill_color = step_expr(
column = "decile",
base = brewer_pal[1],  # color for decile 1
stops = brewer_pal[2:10],  # colors for deciles 2-10
values = 2:10,  # break points at 2,3,4,5,6,7,8,9,10
na_color = "blue"
),
fill_opacity = 0.5)
