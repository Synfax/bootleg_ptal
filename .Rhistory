st_as_sf()
intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
intersectioned$intersection_area <- st_area(intersectioned$x)
intersectioned$pc_intersection <- as.numeric(
((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
)
intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
intersectioned_simple <- data.frame(
isochrone_number = isochrone_num,
total_accessible_employment = sum(intersectioned$ttl_mpl),
total_weighted_acc_employment = sum(intersectioned$weighted_employment)
)
return(intersectioned_simple)
}
plan(multisession, workers = 15)
isochrone_employment_registry <- names(isochrone_registry) %>% future_map(function(iso) {
calculate_isochrone_employment(iso)
}, .options = furrr_options(seed = TRUE), .progress = T) %>% setNames(names(isochrone_registry))
isochrone_employment_registry['14315']
MB_CODE21 = names(mb_to_stops)[2]
stops_accessible = mb_to_stops[MB_CODE21][[1]]
isochrone_employment_registry[stops_accessible]
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible]  )
View(employment_df)
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
sf_use_s2(F)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible]  )
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment),
med_e = median(employment_df$total_weighted_acc_employment)
)
return(employment_simple)
}
#set up a parallel plan and run calculate_mesh_block_employment for each MB.
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
warnings()
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
sf_use_s2(F)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible]  )
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T)
)
return(employment_simple)
}
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
names(mb_to_stops)[34]
MB_CODE21 = '20015740000'
sf_use_s2(F)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
sf_use_s2(F)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(is.na(stops_accessible)) {
return(
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible]  )
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T)
)
return(employment_simple)
}
#set up a parallel plan and run calculate_mesh_block_employment for each MB.
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
is.na(stops_accessible)
names(mb_to_stops)[1]
MB_CODE21 = '20015400000'
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(is.na(stops_accessible)) {
return(
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
)
}
is.na(stops_accessible)
if(any(is.na(stops_accessible))) {
return(
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
)
}
stops_accessible <- NA
any(is.na(stops_accessible))
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
#sf_use_s2(F)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(any(is.na(stops_accessible))) {
return(
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T)
)
return(employment_simple)
}
#set up a parallel plan and run calculate_mesh_block_employment for each MB.
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
warnings()
MB_CODE21 = names(mb_to_stops)[122]
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(any(is.na(stops_accessible))) {
return(
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T)
)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
stops %>% view
stops_sf %>% view
'1922' %in% names(isochrone_registry)
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(any(is.na(stops_accessible))) {
return(employment_simple)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
if(is.null(employment_df)) {
return(employment_simple)
}
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
#sf_use_s2(F)
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(any(is.na(stops_accessible))) {
return(employment_simple)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
if(is.null(employment_df)) {
return(employment_simple)
}
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T)
)
return(employment_simple)
}
#set up a parallel plan and run calculate_mesh_block_employment for each MB.
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
plan('default')
gc()
View(results)
employment_results <- do.call(rbind, results)
View(employment_results)
mb_sf_em <- mb_sf %>%
left_join(employment_results %>% mutate(MB_CODE21 = as.character(MB_CODE21), by = 'MB_CODE21'))
write_sf(mb_sf_em, 'sf_output/mb_sf_em.shp', append = F)
mb_sf_em <- mb_sf %>%
left_join(employment_results %>% mutate(MB_CODE21 = as.character(MB_CODE21)), by = 'MB_CODE21')
calculate_mesh_block_employment <- function(MB_CODE21) {
#
#     sf_use_s2(F)
#     stops_accessible = mb_to_stops[MB_CODE21][[1]]
#
#     #stops_reachable_within_time <- unique(do.call(rbind, isochrone_registry[stops_accessible])$stop_id)
#
#     # buffered_isochrones = buffered_stops[which(buffered_stops$stop_id %in% stops_reachable_within_time), ] %>%
#     #   st_union() %>%
#     #   st_as_sf()
#
#     # Intersection calculations
#     intersectioned <- st_intersection(buffered_isochrones, dzns_sf)
#
#     intersectioned$intersection_area <- st_area(intersectioned$x)
#     intersectioned$pc_intersection <- as.numeric(
#       ((intersectioned$intersection_area/10^6) / intersectioned$AREASQK)
#     )
#     intersectioned$weighted_employment <- intersectioned$pc_intersection * intersectioned$ttl_mpl
#
#     intersectioned_simple <- data.frame(
#       MB_CODE21 = MB_CODE21,
#       total_accessible_employment = sum(intersectioned$ttl_mpl),
#       total_weighted_acc_employment = sum(intersectioned$weighted_employment)
#     )
#
#   # Save results
#   fwrite(intersectioned_simple,
#           paste0('MB_accessibility/', MB_CODE21, '_job_access.csv'))
#sf_use_s2(F)
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0
)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
if(any(is.na(stops_accessible))) {
return(employment_simple)
}
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
if(is.null(employment_df)) {
return(employment_simple)
}
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = mean(employment_df$total_weighted_acc_employment, na.rm = T),
med_e = median(employment_df$total_weighted_acc_employment, na.rm = T),
max_e = max(employment_df$total_weighted_acc_employment, na.rm = T)
)
return(employment_simple)
}
#set up a parallel plan and run calculate_mesh_block_employment for each MB.
plan(multisession, workers = 15)
results <- future_map(names(mb_to_stops), function(MB_CODE21) {
calculate_mesh_block_employment(MB_CODE21)
}, .options = furrr_options(seed = TRUE), .progress = TRUE)
plan('default')
gc()
employment_results <- do.call(rbind, results)
View(results)
employment_results <- do.call(bind_rows, results)
View(employment_results)
mb_sf_em <- mb_sf %>%
left_join(employment_results %>% mutate(MB_CODE21 = as.character(MB_CODE21)), by = 'MB_CODE21')
write_sf(mb_sf_em, 'sf_output/mb_sf_em.shp', append = F)
MB_CODE21 = '20465912000'
employment_simple <- data.frame(MB_CODE21 = MB_CODE21,
mean_e = 0,
med_e = 0,
max_e = 0
)
stops_accessible = mb_to_stops[MB_CODE21][[1]]
employment_df <- do.call(rbind, isochrone_employment_registry[stops_accessible])
View(employment_df)
stops_sf %>% view
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
reset_storage <- function() {
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
}
reset_storage()
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
synfaxgtfs::run_iteration_parallel
reset_storage <- function() {
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
}
reset_storage()
