library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  unname(unlist(synfaxgtfs::get_settings('day'))),
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
#get stops list
gtfs_pre_stops <- as.character(synfaxgtfs::get_stops_in_gtfs_pre())
#get stops sf
stops_sf <- synfaxgtfs::get_stops_sf() %>%
mutate(stop_id = as.character(stop_id)) %>%
filter(stop_id %in% gtfs_pre_stops)
#load dwelling_data
dwelling_data = st_read('~/Documents/r_projects/shapefiles/melbourne_dwelling_data.gpkg')
dwelling_sa1s = unique(dwelling_data$sa1_code_2021)
dwelling_sa2s = unique(dwelling_data$sa2_code_2021)
#employment
#load dzn geographies
dzns_sf <- read_sf('~/Documents/r_projects/shapefiles/DZN_2021_AUST_GDA2020_SHP/DZN_2021_AUST_GDA2020.shp') %>%
filter(SA2_CODE21 %in% dwelling_sa2s)
#load csv
employment_dzn = read.csv('employment_dzn.csv', skip = 10) %>%
rename(DZN_CODE21 = "X1.digit.level.OCCP.Occupation", total_employment = 'Total') %>%
select(DZN_CODE21, total_employment) %>%
mutate(DZN_CODE21 = as.character(DZN_CODE21))
dzns_sf = dzns_sf %>%
left_join(employment_dzn, by = 'DZN_CODE21') %>%
st_transform('wgs84') %>%
select(DZN_CODE21, AREASQKM21, total_employment)
#load mesh block geometries
mb_sf <- read_sf('~/Documents/r_projects/shapefiles/MB_2021_AUST_SHP_GDA2020/MB_2021_AUST_GDA2020.shp') %>%
filter(GCC_NAME21 == "Greater Melbourne", SA1_CODE21 %in% dwelling_sa1s )
#buffer mesh blocks
buffered <- mb_sf %>%
s2::as_s2_geography() %>%
s2_buffer_cells(distance = 450, max_cells = 50)
#re-integrate with  stop_id
buffered_mb_sf <- st_sf(MB_CODE21 =  mb_sf$MB_CODE21, geometry = st_as_sfc(buffered))
#join to stops
joined_buffered_mb_sf <- buffered_mb_sf %>%
st_join(stops_sf) %>% select(c(MB_CODE21, stop_id, geometry))
#convert to df
joined_buffered_mb_df = joined_buffered_mb_sf %>%
st_drop_geometry() %>%
group_by(MB_CODE21) %>%
summarise(stops_inside = list(stop_id))
#convert to hash-table
#this says, for any given MB, which stops can I access?
mb_to_stops = setNames(joined_buffered_mb_df$stops_inside, joined_buffered_mb_df$MB_CODE21)
test <- synfaxgtfs::generate_isochrone(as.character('14315'))
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  unname(unlist(synfaxgtfs::get_settings('day'))),
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
synfaxgtfs:::load_places_registry(isochrone_params)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  unname(unlist(synfaxgtfs::get_settings('day'))),
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(.pkgenv$gtfs_prefilter$stop_id))
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
load_places_registry_parallel(unique_stops, isochrone_params, arrival_time_dict)
synfaxgtfs::place_registry(unique_stops, isochrone_params, arrival_time_dict)
xyz <- synfaxgtfs:::.pkgenv$place_registry
xyz[1]
xyz['11198']
test <- synfaxgtfs::run_iteration('14315', isochrone_params)
View(xyz)
synfaxgtfs::place_registry()
synfaxgtfs::place_registry
View(arrival_time_dict)
synfaxgtfs::place_registry(unique_stops, isochrone_params, arrival_time_dict)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
synfaxgtfs::place_registry
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  unname(unlist(synfaxgtfs::get_settings('day'))),
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
synfaxgtfs::place_registry(unique_stops, isochrone_params, arrival_time_dict)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  unname(unlist(synfaxgtfs::get_settings('day'))),
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
.pkgenv = synfaxgtfs:::.pkgenv
place_registry(unique_stops, isochrone_params, arrival_time_dict)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
synfaxgtfs::place_registry == place_registry
synfaxgtfs::place_registry
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
synfaxgtfs::load_place_registry
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'monday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
#.pkgenv = synfaxgtfs:::.pkgenv
load_place_registry(unique_stops, isochrone_params, arrival_time_dict)
.pkgenv = synfaxgtfs:::.pkgenv
.pkgenv$place_registry
.pkgenv$place_registry['14315']
.pkgenv$place_registry['14315'][[1]]
is_empty(.pkgenv$place_registry['14315'][[1]])
rm(.pkgenv)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
synfaxgtfs::load_place_registry_parallel()
plan('default')
synfaxgtfs::load_place_registry_parallel
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'monday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
#.pkgenv = synfaxgtfs:::.pkgenv
load_place_registry_parallel(unique_stops, isochrone_params, arrival_time_dict)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'tuesday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'tuesday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'tuesday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
synfaxgtfs::run_iteration_parallel
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
source('process_isochrone.R')
source('calculate_mesh_block_employment.R')
#synfax gtfs
gtfs_parameters =  list(mode_numbers = unname(unlist(synfaxgtfs::get_settings('mode_numbers'))),
day =  'tuesday',
city = unname(unlist(synfaxgtfs::get_settings('city'))))
isochrone_params = list(start_time_ = synfaxgtfs::get_settings('start_time_')[[1]][1],
time_limit_ = synfaxgtfs::get_settings('time_limit_')[[1]][1],
xfer_penalty_ = synfaxgtfs::get_settings('xfer_penalty_')[[1]][1] )
synfaxgtfs:::.preload_isochrone_data(gtfs_parameters, isochrone_params)
unique_stops = (unique(synfaxgtfs:::.pkgenv$gtfs_prefilter$stop_id))
arrival_time_dict = synfaxgtfs:::.pkgenv$arrival_time_dict
#.pkgenv = synfaxgtfs:::.pkgenv
#synfaxgtfs::place_registry_2(unique_stops, isochrone_params, arrival_time_dict)
#synfaxgtfs:::.pkgenv$place_registry -> a
#get stops list
gtfs_pre_stops <- as.character(synfaxgtfs::get_stops_in_gtfs_pre())
#get stops sf
stops_sf <- synfaxgtfs::get_stops_sf() %>%
mutate(stop_id = as.character(stop_id)) %>%
filter(stop_id %in% gtfs_pre_stops)
#buffered_stops
melbourne_utm <- "EPSG:32755"
buffered_stops <- stops_sf %>%
st_transform(crs = melbourne_utm) %>%
st_buffer(dist = 450) %>%
st_transform(st_crs(stops_sf)) %>%
st_as_sf()
buffered_stops = st_make_valid(buffered_stops)
#load dwelling_data
dwelling_data = st_read('~/Documents/r_projects/shapefiles/melbourne_dwelling_data.gpkg')
dwelling_sa1s = unique(dwelling_data$sa1_code_2021)
dwelling_sa2s = unique(dwelling_data$sa2_code_2021)
if(file.exists('sf_output/dzns_sf.shp')) {
dzns_sf <- read_sf('sf_output/dzns_sf.shp')
} else {
#employment
#load dzn geographies
dzns_sf <- read_sf('~/Documents/r_projects/shapefiles/DZN_2021_AUST_GDA2020_SHP/DZN_2021_AUST_GDA2020.shp') %>%
filter(SA2_CODE21 %in% dwelling_sa2s)
#load csv
employment_dzn = read.csv('employment_dzn.csv', skip = 10) %>%
rename(DZN_CODE21 = "X1.digit.level.OCCP.Occupation", total_employment = 'Total') %>%
select(DZN_CODE21, total_employment) %>%
mutate(DZN_CODE21 = as.character(DZN_CODE21))
dzns_sf = dzns_sf %>%
left_join(employment_dzn, by = 'DZN_CODE21') %>%
st_transform('wgs84') %>%
select(DZN_CODE21, AREASQKM21, total_employment)
write_sf(dzns_sf, 'sf_output/dzns_sf.shp')
}
#load mesh block geometries
mb_sf <- read_sf('~/Documents/r_projects/shapefiles/MB_2021_AUST_SHP_GDA2020/MB_2021_AUST_GDA2020.shp') %>%
filter(GCC_NAME21 == "Greater Melbourne", SA1_CODE21 %in% dwelling_sa1s )
#buffer mesh blocks
buffered <- mb_sf %>%
s2::as_s2_geography() %>%
s2_buffer_cells(distance = 450, max_cells = 50)
#re-integrate with  stop_id
buffered_mb_sf <- st_sf(MB_CODE21 =  mb_sf$MB_CODE21, geometry = st_as_sfc(buffered))
#join to stops
joined_buffered_mb_sf <- buffered_mb_sf %>%
st_join(stops_sf) %>% select(c(MB_CODE21, stop_id, geometry))
#convert to df
joined_buffered_mb_df = joined_buffered_mb_sf %>%
st_drop_geometry() %>%
group_by(MB_CODE21) %>%
summarise(stops_inside = list(stop_id))
#convert to hash-table
#this says, for any given MB, which stops can I access?
mb_to_stops = setNames(joined_buffered_mb_df$stops_inside, joined_buffered_mb_df$MB_CODE21)
message('Begining actual analysis')
#begin actual analysis
#plan(multicore, workers = parallel::detectCores() - 1)
xz <- load_place_registry_parallel(unique_stops, isochrone_params, arrival_time_dict)
rm(xz)
gc()
plan('default')
message('Place reg loaded')
plan(multicore, workers = parallel::detectCores() - 1)
#set options to 5gb each.
options(future.globals.maxSize = 5 * 1024^3)
#get list of stops that are yet to be saved. Only use in case of an interrupted run on the same GTFS day.
# stops_completed = list.files('stop_isochrones') %>% str_replace('_isochrone.csv', '')
# stops_remaining = setdiff(gtfs_pre_stops, stops_completed)
# stops_no_rbus = full_env$stops_no_rbus$stop_id
# stops_remaining = intersect(stops_no_rbus, stops_remaining)
# Then use future_map with explicit passing of parameters
results <- future_map(
gtfs_pre_stops,
function(stop_id) {
# Explicitly pass both parameters to process_stop
process_isochrone(starting_stop = stop_id, isochrone_params = isochrone_params, synfaxgtfs:::.pkgenv)
},
.options = furrr_options(seed = TRUE),
.progress = TRUE
)
# Define the processing function
process_isochrone <- function(starting_stop, isochrone_params, full_env) {
starting_stop <- as.character(starting_stop)
#print(isochrone_params)
# Generate isochrone
isochrone_results <- synfaxgtfs::run_iteration_parallel(starting_stop, isochrone_params, full_env, restrict_initial_xfer = T)
# Save slim results
slim_results <- isochrone_results
fwrite(slim_results, paste0('stop_isochrones/', starting_stop, '_isochrone.csv'))
# Return ID for progress tracking
return(starting_stop)
}
plan(multicore, workers = parallel::detectCores() - 1)
#set options to 5gb each.
options(future.globals.maxSize = 5 * 1024^3)
#get list of stops that are yet to be saved. Only use in case of an interrupted run on the same GTFS day.
# stops_completed = list.files('stop_isochrones') %>% str_replace('_isochrone.csv', '')
# stops_remaining = setdiff(gtfs_pre_stops, stops_completed)
# stops_no_rbus = full_env$stops_no_rbus$stop_id
# stops_remaining = intersect(stops_no_rbus, stops_remaining)
# Then use future_map with explicit passing of parameters
results <- future_map(
gtfs_pre_stops,
function(stop_id) {
# Explicitly pass both parameters to process_stop
process_isochrone(starting_stop = stop_id, isochrone_params = isochrone_params, synfaxgtfs:::.pkgenv)
},
.options = furrr_options(seed = TRUE),
.progress = TRUE
)
plan('default')
gc()
plan()
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
plan(multicore, workers = parallel::detectCores() - 1)
pplan()
plan()
nbrOfWorkers()
#set options to 5gb each.
options(future.globals.maxSize = 5 * 1024^3)
nbrOfFreeWorkers()
# Then use future_map with explicit passing of parameters
results <- future_map(
gtfs_pre_stops,
function(stop_id) {
# Explicitly pass both parameters to process_stop
process_isochrone(starting_stop = stop_id, isochrone_params = isochrone_params, synfaxgtfs:::.pkgenv)
},
.options = furrr_options(seed = TRUE),
.progress = TRUE
)
delete_files_in_folders <- function(folder_paths) {
# Loop through each folder
for (folder in folder_paths) {
# Check if the folder exists
if (dir.exists(folder)) {
# Get all files in the folder
files <- list.files(folder, full.names = TRUE, recursive = FALSE)
# Delete each file
if (length(files) > 0) {
message("Deleting ", length(files), " files from ", folder)
file.remove(files)
} else {
message("No files found in ", folder)
}
} else {
warning("Folder does not exist: ", folder)
}
}
}
# Example usage:
folders <- c("stop_isochrones/", "MB_accessibility/")
delete_files_in_folders(folders)
library(synfaxgtfs)
library(tidyverse)
library(data.table)
library(sf)
library(lubridate)
library(tictoc)
library(s2)
library(leaflet)
library(future)
library(furrr)
source('process_isochrone.R')
source('calculate_mesh_block_employment.R')
plan(multicore, workers = parallel::detectCores() - 1)
#set options to 5gb each.
options(future.globals.maxSize = 5 * 1024^3)
#get list of stops that are yet to be saved. Only use in case of an interrupted run on the same GTFS day.
# stops_completed = list.files('stop_isochrones') %>% str_replace('_isochrone.csv', '')
# stops_remaining = setdiff(gtfs_pre_stops, stops_completed)
# stops_no_rbus = full_env$stops_no_rbus$stop_id
# stops_remaining = intersect(stops_no_rbus, stops_remaining)
# Then use future_map with explicit passing of parameters
results <- future_map(
gtfs_pre_stops,
function(stop_id) {
# Explicitly pass both parameters to process_stop
process_isochrone(starting_stop = stop_id, isochrone_params = isochrone_params, synfaxgtfs:::.pkgenv)
},
.options = furrr_options(seed = TRUE),
.progress = TRUE
)
